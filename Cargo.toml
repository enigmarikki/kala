# Kala Blockchain - Workspace Configuration
#
# This is the root workspace configuration for the Kala blockchain project.
# Kala is a VDF-based blockchain architecture designed for trustless timestamping
# and consensus with MEV resistance through timelock encryption.
#
# The workspace is organized into the following crates:
# - kala-core: Main blockchain node implementation with consensus logic
# - kala-common: Shared utilities, types, and helper functions
# - kala-state: State management and account handling
# - kala-rpc: JSON-RPC server for external API access
# - kala-transaction: Transaction types and processing logic
# - kala-vdf: Verifiable Delay Function implementations
# - tick/tick: Low-level VDF computation engine (C++ with Rust bindings)
# - timelocks/timelocks: RSW timelock puzzle implementations for MEV resistance

[workspace]
resolver = "2"
members = [
    "tick/tick",                # VDF computation engine
    "timelocks/timelocks",      # RSW timelock puzzles for MEV mitigation
    "kala-common",              # Shared utilities and types
    "kala-core",                # Main blockchain node and consensus
    "kala-state",               # State management and accounts
    "kala-rpc",                 # JSON-RPC API server
    "kala-transaction",         # Transaction types and processing
    "kala-vdf",                 # VDF implementations and utilities
]

# Shared package metadata for all workspace members
[workspace.package]
version = "0.0.2"
authors = ["Hrishi"]
edition = "2021"
license = "MIT OR Apache-2.0"
repository = "https://github.com/enigmarikki/kala"

# Centralized dependency management for the entire workspace
# This ensures version consistency across all crates and simplifies maintenance
[workspace.dependencies]
# Internal crates - VDF and cryptographic components
tick = { path = "tick/tick" }                              # C++ VDF computation engine
timelocks = { path = "timelocks/timelocks" }               # RSW timelock puzzles
kala-common = { path = "kala-common" }                     # Shared utilities and types
kala-core = { path = "kala-core" }                         # Main blockchain node
kala-state = { path = "kala-state" }                       # State management
kala-rpc = { path = "kala-rpc" }                           # JSON-RPC API
kala-transaction = { path = "kala-transaction" }           # Transaction handling
kala-vdf = { path = "kala-vdf" }                           # VDF utilities

# External dependencies - grouped by category

# Async runtime and networking
tokio = { version = "1.35", features = ["full"] }           # Async runtime for concurrent operations
axum = "0.8.4"                                              # Web framework for HTTP APIs
tower = "0.5.2"                                             # Service abstraction layer
jsonrpsee = { version = "0.25.1", features = ["server", "macros"] }  # JSON-RPC implementation
futures = "0.3"                                             # Future combinators and utilities

# Serialization and data handling
serde = { version = "1.0", features = ["derive"] }         # Serialization framework
bincode = "2.0.1"                                          # Binary serialization format
flatbuffers = "25.2.10"                                    # Zero-copy serialization (for transactions)
hex = "0.4"                                                 # Hex encoding/decoding utilities

# Cryptography and security
sha2 = "0.10"                                               # SHA-2 hash functions
aes-gcm = "0.10"                                            # AES-GCM authenticated encryption
rand = "0.9.2"                                              # Random number generation
rug = { version = "1.24", features = ["integer", "rand"] } # High-precision arithmetic (GMP bindings)

# Mathematical libraries for VDF operations
num-bigint = "0.4"                                          # Arbitrary precision integers
num-traits = "0.2"                                          # Numeric trait abstractions

# Storage and persistence
rocksdb = "0.23"                                            # Embedded key-value database

# Error handling and logging
anyhow = "1.0"                                              # Flexible error handling
thiserror = "2.0.12"                                        # Derive macros for error types
tracing = "0.1"                                             # Structured logging framework
tracing-subscriber = { version = "0.3", features = ["env-filter"] } # Log subscriber implementations

# CLI and configuration
clap = { version = "4.0", features = ["derive"] }          # Command line argument parsing

# Build-time dependencies
cc = "1.0"                                                  # C/C++ compiler integration
bindgen = "0.72"                                            # Rust bindings generator for C/C++

# Async utilities
async-trait = "0.1"                                         # Async trait support

# Configuration file formats (used by kala-core)
serde_json = "1.0"                                          # JSON serialization
serde_yaml = "0.9"                                          # YAML configuration files
toml = "0.9.5"                                              # TOML configuration files

# Optimized release profile for production builds
# These settings maximize performance for VDF computations
[profile.release]
lto = true              # Link-time optimization for better performance
codegen-units = 1       # Single codegen unit for maximum optimization
opt-level = 3           # Highest optimization level

# Benchmark profile inherits release optimizations
[profile.bench]
inherits = "release"     # Use release settings for accurate benchmarks
